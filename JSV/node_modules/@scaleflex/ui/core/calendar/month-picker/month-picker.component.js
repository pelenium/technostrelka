import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useEffect, useState } from 'react';
import { intrinsicComponent } from '../../../utils/functions';
import Styled from '../calendar.styles';
import { getDateStringFromTimestamp, MONTHS_PICKER } from '../calendar.utils';
var MonthPicker = intrinsicComponent(function (_ref, ref) {
  var _ref$showMonthsDatePi = _ref.showMonthsDatePicker,
    showMonthsDatePicker = _ref$showMonthsDatePi === void 0 ? false : _ref$showMonthsDatePi,
    setShowMonthsDatePicker = _ref.setShowMonthsDatePicker,
    getMonthStr = _ref.getMonthStr,
    currentMonth = _ref.currentMonth,
    setMonth = _ref.setMonth,
    _month = _ref._month,
    _ref$year = _ref.year,
    year = _ref$year === void 0 ? 0 : _ref$year,
    _ref$maxMonth = _ref.maxMonth,
    maxMonth = _ref$maxMonth === void 0 ? 0 : _ref$maxMonth,
    _ref$minMonth = _ref.minMonth,
    minMonth = _ref$minMonth === void 0 ? 0 : _ref$minMonth,
    _ref$maxYear = _ref.maxYear,
    maxYear = _ref$maxYear === void 0 ? 0 : _ref$maxYear,
    maxDate = _ref.maxDate,
    value = _ref.value,
    onChange = _ref.onChange,
    _ref$selectedDay = _ref.selectedDay,
    selectedDay = _ref$selectedDay === void 0 ? 0 : _ref$selectedDay,
    setSelectedDay = _ref.setSelectedDay,
    setMonthDetails = _ref.setMonthDetails,
    getMonthDetails = _ref.getMonthDetails,
    getTimeStamp = _ref.getTimeStamp,
    monthDetails = _ref.monthDetails;
  var _useState = useState(currentMonth),
    _useState2 = _slicedToArray(_useState, 2),
    selectedMonth = _useState2[0],
    setSelectedMonth = _useState2[1];
  var isMonthValid = maxMonth <= 12;
  useEffect(function () {
    if (getTimeStamp) setSelectedDay === null || setSelectedDay === void 0 ? void 0 : setSelectedDay(getTimeStamp());
  }, [monthDetails]);
  var handleOnClickMonth = function handleOnClickMonth(index) {
    setSelectedMonth === null || setSelectedMonth === void 0 ? void 0 : setSelectedMonth(getMonthStr === null || getMonthStr === void 0 ? void 0 : getMonthStr(index));
    setMonth === null || setMonth === void 0 ? void 0 : setMonth(index);
    setShowMonthsDatePicker === null || setShowMonthsDatePicker === void 0 ? void 0 : setShowMonthsDatePicker(false);
    setMonthDetails === null || setMonthDetails === void 0 ? void 0 : setMonthDetails(getMonthDetails === null || getMonthDetails === void 0 ? void 0 : getMonthDetails(year, index));
    if (onChange) {
      onChange(getDateStringFromTimestamp(selectedDay, index, year));
    }
  };
  useEffect(function () {
    if (maxDate && maxMonth && isMonthValid && !value) {
      setMonth === null || setMonth === void 0 ? void 0 : setMonth(maxMonth);
      setMonthDetails === null || setMonthDetails === void 0 ? void 0 : setMonthDetails(getMonthDetails === null || getMonthDetails === void 0 ? void 0 : getMonthDetails(maxYear, maxMonth));
    }
  }, []);
  var isMonthChanged = function isMonthChanged(index) {
    return index === _month;
  };
  return /*#__PURE__*/React.createElement(Styled.MonthDatePickerWrapper, {
    open: showMonthsDatePicker,
    ref: ref
  }, /*#__PURE__*/React.createElement(Styled.HeaderWrapper, null, /*#__PURE__*/React.createElement(Styled.HeaderBody, null, /*#__PURE__*/React.createElement(Styled.HeaderBodyMonth, {
    onClick: function onClick() {
      return setShowMonthsDatePicker === null || setShowMonthsDatePicker === void 0 ? void 0 : setShowMonthsDatePicker(false);
    }
  }, selectedMonth), /*#__PURE__*/React.createElement(Styled.HeaderBodyYear, null))), /*#__PURE__*/React.createElement(Styled.MonthButtonsWrapper, null, MONTHS_PICKER.map(function (month, index) {
    return /*#__PURE__*/React.createElement(Styled.MonthButtons, {
      onClick: function onClick() {
        return handleOnClickMonth(index);
      },
      isMonthChanged: isMonthChanged(index),
      key: month,
      isDisabled: index > maxMonth || index < minMonth
    }, month);
  })));
});
export default MonthPicker;