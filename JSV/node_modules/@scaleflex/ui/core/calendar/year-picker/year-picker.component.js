import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useEffect, useState } from 'react';
import TwoArrowsRight from '@scaleflex/icons/two-arrows-right';
import TwoArrowsLeft from '@scaleflex/icons/two-arrows-left';
import { intrinsicComponent } from '../../../utils/functions';
import Styled from '../calendar.styles';
import { getDateStringFromTimestamp } from '../calendar.utils';
var YearPicker = intrinsicComponent(function (_ref, ref) {
  var _ref$showYearsDatePic = _ref.showYearsDatePicker,
    showYearsDatePicker = _ref$showYearsDatePic === void 0 ? false : _ref$showYearsDatePic,
    setShowYearsDatePicker = _ref.setShowYearsDatePicker,
    _ref$monthIndex = _ref.monthIndex,
    monthIndex = _ref$monthIndex === void 0 ? 0 : _ref$monthIndex,
    _ref$_year = _ref._year,
    _year = _ref$_year === void 0 ? 0 : _ref$_year,
    setYear = _ref.setYear,
    maxDate = _ref.maxDate,
    _ref$value = _ref.value,
    value = _ref$value === void 0 ? '' : _ref$value,
    setMonthDetails = _ref.setMonthDetails,
    getMonthDetails = _ref.getMonthDetails,
    setSelectedDay = _ref.setSelectedDay,
    getTimeStamp = _ref.getTimeStamp,
    _ref$selectedDay = _ref.selectedDay,
    selectedDay = _ref$selectedDay === void 0 ? 0 : _ref$selectedDay,
    _ref$maxYear = _ref.maxYear,
    maxYear = _ref$maxYear === void 0 ? 0 : _ref$maxYear,
    _ref$minYear = _ref.minYear,
    minYear = _ref$minYear === void 0 ? 0 : _ref$minYear,
    _ref$maxMonth = _ref.maxMonth,
    maxMonth = _ref$maxMonth === void 0 ? 0 : _ref$maxMonth,
    _ref$isYearForm = _ref.isYearForm,
    isYearForm = _ref$isYearForm === void 0 ? false : _ref$isYearForm,
    onChange = _ref.onChange,
    monthDetails = _ref.monthDetails;
  var _useState = useState(_year),
    _useState2 = _slicedToArray(_useState, 2),
    startYear = _useState2[0],
    setStartYear = _useState2[1];
  var _useState3 = useState(_year + 11),
    _useState4 = _slicedToArray(_useState3, 2),
    endYear = _useState4[0],
    setEndYear = _useState4[1];
  var yearsArray = new Array(endYear - startYear + 1).fill(0).map(function (_, index) {
    return startYear + index;
  });
  var _maxMonth = maxMonth + 1;
  var isYearChanged = function isYearChanged(year) {
    return year === _year;
  };
  var nextYear = function nextYear(offset) {
    setStartYear(startYear + offset);
    setEndYear(endYear + offset);
  };
  var handleOnClickYear = function handleOnClickYear(year) {
    if (onChange) {
      onChange(getDateStringFromTimestamp(selectedDay, monthIndex, year));
    }
    setYear === null || setYear === void 0 ? void 0 : setYear(year);
    setShowYearsDatePicker === null || setShowYearsDatePicker === void 0 ? void 0 : setShowYearsDatePicker(false);
    setMonthDetails === null || setMonthDetails === void 0 ? void 0 : setMonthDetails(getMonthDetails === null || getMonthDetails === void 0 ? void 0 : getMonthDetails(year, monthIndex));
  };
  useEffect(function () {
    if (!yearsArray.includes(_year)) {
      setStartYear(_year);
      setEndYear(_year + 11);
    }
  }, [_year]);
  useEffect(function () {
    if (maxDate && isYearForm && _maxMonth && !value) {
      setStartYear(maxYear - 11);
      setEndYear(maxYear);
      setYear === null || setYear === void 0 ? void 0 : setYear(maxYear);
      setMonthDetails === null || setMonthDetails === void 0 ? void 0 : setMonthDetails(getMonthDetails === null || getMonthDetails === void 0 ? void 0 : getMonthDetails(maxYear, maxMonth));
    }
  }, []);
  useEffect(function () {
    if (getTimeStamp) setSelectedDay === null || setSelectedDay === void 0 ? void 0 : setSelectedDay(getTimeStamp());
  }, [monthDetails]);
  return /*#__PURE__*/React.createElement(Styled.MonthDatePickerWrapper, {
    open: showYearsDatePicker,
    ref: ref
  }, /*#__PURE__*/React.createElement(Styled.HeaderWrapper, null, /*#__PURE__*/React.createElement(Styled.MonthsHeaderLeftArrow, {
    isDisabled: startYear <= minYear,
    onClick: function onClick() {
      return nextYear(-10);
    }
  }, /*#__PURE__*/React.createElement(TwoArrowsRight, {
    size: 10
  })), /*#__PURE__*/React.createElement(Styled.YearsHeaderBody, {
    onClick: function onClick() {
      return setShowYearsDatePicker === null || setShowYearsDatePicker === void 0 ? void 0 : setShowYearsDatePicker(false);
    }
  }, "".concat(startYear, " - ").concat(endYear)), /*#__PURE__*/React.createElement(Styled.MonthsHeaderRightArrow, {
    isDisabled: endYear >= maxYear
  }, /*#__PURE__*/React.createElement(TwoArrowsLeft, {
    size: 10,
    onClick: function onClick() {
      return nextYear(10);
    }
  }))), /*#__PURE__*/React.createElement(Styled.MonthButtonsWrapper, null, yearsArray.map(function (year) {
    return /*#__PURE__*/React.createElement(Styled.MonthButtons, {
      isDisabled: year > maxYear || year < minYear,
      key: year,
      isYearChanged: isYearChanged(year),
      onClick: function onClick() {
        return handleOnClickYear(year);
      }
    }, year);
  })));
});
export default YearPicker;