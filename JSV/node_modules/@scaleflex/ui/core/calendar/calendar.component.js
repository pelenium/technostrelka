import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["value", "onChange", "autoSelectToday", "maxDate", "minDate", "anchorEl", "position", "popperOptions", "open", "setOpen", "calendarStyles"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
import React, { useState, useEffect } from 'react';
import PT from 'prop-types';
import ArrowLeftOutline from '@scaleflex/icons/arrow-left-outline';
import ArrowRightOutline from '@scaleflex/icons/arrow-right-outline';
import TwoArrowsLeft from '@scaleflex/icons/two-arrows-left';
import TwoArrowsRight from '@scaleflex/icons/two-arrows-right';
import { intrinsicComponent, objectValues } from '../../utils/functions';
import Popper from '../popper';
import MonthPicker from './month-picker/month-picker.component';
import YearPicker from './year-picker/year-picker.component';
import Button from '../button';
import { propTypes as popperPropTypes } from '../popper/popper.component';
import { HEADER_DAYS, getCurrentDate, getMonthDetails, getDateStringFromTimestamp, getMonthStr, getDateFromDateString, getTodayTimestamp, isYearFormRegex, getNextPrevSelectedDayTimeStamp, getNextPrevYearSelectedDayTimeStamp, getMaxMinSelectedDay, getMaxDate, getMinDate } from './calendar.utils';
import Styled from './calendar.styles';
import { Position } from '../popper/types';
var Calendar = intrinsicComponent(function (_ref, ref) {
  var _isYearFormRegex$test;
  var value = _ref.value,
    onChange = _ref.onChange,
    autoSelectToday = _ref.autoSelectToday,
    _ref$maxDate = _ref.maxDate,
    maxDate = _ref$maxDate === void 0 ? '' : _ref$maxDate,
    _ref$minDate = _ref.minDate,
    minDate = _ref$minDate === void 0 ? '' : _ref$minDate,
    anchorEl = _ref.anchorEl,
    position = _ref.position,
    popperOptions = _ref.popperOptions,
    _ref$open = _ref.open,
    open = _ref$open === void 0 ? false : _ref$open,
    setOpen = _ref.setOpen,
    calendarStyles = _ref.calendarStyles,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _getMaxDate = getMaxDate(maxDate),
    maxYear = _getMaxDate.maxYear,
    maxMonth = _getMaxDate.maxMonth,
    maxDay = _getMaxDate.maxDay,
    maxDateTimestamp = _getMaxDate.maxDateTimestamp;
  var _getMinDate = getMinDate(minDate),
    minYear = _getMinDate.minYear,
    minMonth = _getMinDate.minMonth,
    minDay = _getMinDate.minDay,
    minDateTimestamp = _getMinDate.minDateTimestamp;
  var _useState = useState(maxDate ? maxYear : new Date().getFullYear()),
    _useState2 = _slicedToArray(_useState, 2),
    year = _useState2[0],
    setYear = _useState2[1];
  var _useState3 = useState(maxDate ? maxMonth : new Date().getMonth()),
    _useState4 = _slicedToArray(_useState3, 2),
    month = _useState4[0],
    setMonth = _useState4[1];
  var _useState5 = useState(getMonthDetails(year, month)),
    _useState6 = _slicedToArray(_useState5, 2),
    monthDetails = _useState6[0],
    setMonthDetails = _useState6[1];
  var _useState7 = useState(getMaxMinSelectedDay(maxDate, minDate, monthDetails, maxDay, minDay)),
    _useState8 = _slicedToArray(_useState7, 2),
    selectedDay = _useState8[0],
    setSelectedDay = _useState8[1];
  var _useState9 = useState(0),
    _useState10 = _slicedToArray(_useState9, 2),
    dayDate = _useState10[0],
    setDayDate = _useState10[1];
  var _useState11 = useState(false),
    _useState12 = _slicedToArray(_useState11, 2),
    showMonthsDatePicker = _useState12[0],
    setShowMonthsDatePicker = _useState12[1];
  var _useState13 = useState(false),
    _useState14 = _slicedToArray(_useState13, 2),
    showYearsDatePicker = _useState14[0],
    setShowYearsDatePicker = _useState14[1];
  var _useState15 = useState(false),
    _useState16 = _slicedToArray(_useState15, 2),
    isNextMonth = _useState16[0],
    setIsNextMonth = _useState16[1];
  var _useState17 = useState(false),
    _useState18 = _slicedToArray(_useState17, 2),
    isPrevMonth = _useState18[0],
    setIsPrevMonth = _useState18[1];
  var isYearForm = (_isYearFormRegex$test = isYearFormRegex.test) === null || _isYearFormRegex$test === void 0 ? void 0 : _isYearFormRegex$test.call(isYearFormRegex, maxYear);
  var isTodayDateDisabled = getTodayTimestamp() > maxDateTimestamp || getTodayTimestamp() < minDateTimestamp;
  var nextMonthTimestamp = getNextPrevSelectedDayTimeStamp(year, month, 1);
  var prevtMonthTimestamp = getNextPrevSelectedDayTimeStamp(year, month, -1);
  var nextYearTimestamp = getNextPrevYearSelectedDayTimeStamp(year, month, dayDate, 1);
  var prevYearTimestamp = getNextPrevYearSelectedDayTimeStamp(year, month, dayDate, -1);
  var getTimeStamp = function getTimeStamp() {
    var toDayDate = monthDetails.find(function (day) {
      return day.date === dayDate;
    });
    return toDayDate === null || toDayDate === void 0 ? void 0 : toDayDate.timestamp;
  };
  var setNewYear = function setNewYear(offset) {
    var newYear = year + offset;
    if (onChange) {
      onChange(getDateStringFromTimestamp(selectedDay, month, newYear));
    }
    setYear(newYear);
    setMonthDetails(getMonthDetails(newYear, month));
  };
  var setNewMonth = function setNewMonth(offset, prev) {
    var newYear = year;
    var newMonth = month + offset;
    if (month === 0 && prev) {
      newMonth = 11;
      newYear--;
    } else if (month === 11 && !prev) {
      newMonth = 0;
      newYear++;
    }
    if (onChange) {
      onChange(getDateStringFromTimestamp(selectedDay, newMonth, newYear));
    }
    setYear(newYear);
    setMonth(newMonth);
    setMonthDetails(getMonthDetails(newYear, newMonth));
  };
  var handleNextMonthButton = function handleNextMonthButton(offset, prev) {
    setNewMonth(offset, prev);
    setIsNextMonth(true);
  };
  var handlePrevMonthButton = function handlePrevMonthButton(offset, next) {
    setNewMonth(offset, next);
    setIsPrevMonth(true);
  };
  var handleNextYearButton = function handleNextYearButton(offset, prev) {
    if (prev) {
      setIsPrevMonth(true);
    } else {
      setIsNextMonth(true);
    }
    setNewYear(offset);
  };
  var handleTodayButton = function handleTodayButton() {
    var currentYear = new Date().getFullYear();
    var currentMonth = new Date().getMonth();
    var todayTimestamp = getTodayTimestamp();
    if (isTodayDateDisabled) return;
    setSelectedDay(todayTimestamp);
    setYear(function () {
      return currentYear;
    });
    setMonth(function () {
      return currentMonth;
    });
    setMonthDetails(getMonthDetails(currentYear, currentMonth));
    if (onChange) {
      onChange(getCurrentDate());
    }
  };
  var handleOpen = function handleOpen(isOpen) {
    if (setOpen) setOpen(isOpen);
  };
  var onDateClick = function onDateClick(day) {
    var newDay = day.timestamp;
    if (onChange) {
      onChange(getDateStringFromTimestamp(newDay, month, year));
    }
    if (handleOpen) handleOpen(false);
    setSelectedDay(newDay);
  };
  useEffect(function () {
    if (year.toString().length !== 4) return;
    if (onChange && autoSelectToday && !isTodayDateDisabled) {
      onChange(getDateStringFromTimestamp(selectedDay, month, year));
    }
  }, [autoSelectToday]);
  useEffect(function () {
    var todayDate = monthDetails.find(function (day) {
      return day.timestamp === selectedDay;
    });
    if (todayDate) {
      setDayDate(todayDate.date);
    }
  }, [selectedDay]);
  useEffect(function () {
    if (value) {
      var dateData = getDateFromDateString(value);
      var dayData = monthDetails.find(function (day) {
        return (day === null || day === void 0 ? void 0 : day.date) === (dateData === null || dateData === void 0 ? void 0 : dateData.date);
      });
      if (dateData !== null) {
        if (onChange) onChange(value);
        if (dayData !== null && dayData !== void 0 && dayData.timestamp && dateData.year.toString().length === 4) {
          setSelectedDay(dayData === null || dayData === void 0 ? void 0 : dayData.timestamp);
        }
        setMonth(dateData.month - 1);
        setYear(dateData.year);
        setMonthDetails(getMonthDetails(dateData.year, dateData.month - 1));
      }
    }
  }, [value]);
  useEffect(function () {
    setTimeout(function () {
      setIsNextMonth(false);
      setIsPrevMonth(false);
    }, 310);
  }, [monthDetails]);
  var renderCalendar = function renderCalendar() {
    var days = monthDetails.map(function (day, index) {
      return /*#__PURE__*/React.createElement(Styled.DatePickerDays, {
        key: index
      }, /*#__PURE__*/React.createElement(Styled.DatePickerDayContainer, null, /*#__PURE__*/React.createElement(Styled.DatePickerDay, {
        isDisabled: day.timestamp > maxDateTimestamp || day.timestamp < minDateTimestamp,
        onClick: function onClick() {
          return onDateClick(day);
        },
        day: day,
        isSelectedDay: dayDate === day.date
      }, day.date)));
    });
    return /*#__PURE__*/React.createElement(Styled.DatePickerCalendar, null, /*#__PURE__*/React.createElement(Styled.DatePickerCalendarHead, null, HEADER_DAYS.map(function (d, i) {
      return /*#__PURE__*/React.createElement(Styled.DatePickerHeadDay, {
        key: i
      }, d);
    })), /*#__PURE__*/React.createElement(Styled.DatePickerCalendarBody, {
      isPrevMonth: isPrevMonth,
      isNextMonth: isNextMonth
    }, days));
  };
  return /*#__PURE__*/React.createElement(Popper, {
    onClick: function onClick() {
      return handleOpen(!open);
    },
    anchorEl: anchorEl,
    open: open,
    popperOptions: popperOptions,
    position: position || 'bottom-start',
    overlay: true
  }, /*#__PURE__*/React.createElement(Styled.Calendar, _extends({
    position: position,
    open: open,
    style: _objectSpread({}, calendarStyles)
  }, rest, {
    ref: ref
  }), /*#__PURE__*/React.createElement(MonthPicker, {
    year: year,
    setMonth: setMonth,
    getMonthStr: getMonthStr,
    _month: month,
    getTimeStamp: getTimeStamp,
    selectedDay: selectedDay,
    onChange: onChange,
    setSelectedDay: setSelectedDay,
    currentMonth: getMonthStr(month),
    showMonthsDatePicker: showMonthsDatePicker,
    setShowMonthsDatePicker: setShowMonthsDatePicker,
    setMonthDetails: setMonthDetails,
    getMonthDetails: getMonthDetails,
    monthDetails: monthDetails,
    maxMonth: maxMonth,
    minMonth: minMonth,
    maxYear: maxYear,
    maxDate: maxDate,
    value: value
  }), /*#__PURE__*/React.createElement(YearPicker, {
    showYearsDatePicker: showYearsDatePicker,
    setShowYearsDatePicker: setShowYearsDatePicker,
    setMonthDetails: setMonthDetails,
    getMonthDetails: getMonthDetails,
    monthDetails: monthDetails,
    getTimeStamp: getTimeStamp,
    setSelectedDay: setSelectedDay,
    selectedDay: selectedDay,
    onChange: onChange,
    setYear: setYear,
    monthIndex: month,
    _year: year,
    value: value,
    maxDate: maxDate,
    minDate: minDate,
    minYear: minYear,
    maxYear: maxYear,
    maxMonth: maxMonth,
    isYearForm: isYearForm
  }), /*#__PURE__*/React.createElement(Styled.HeaderWrapper, null, /*#__PURE__*/React.createElement(Styled.HeaderLeftArrows, {
    isDisabled: prevYearTimestamp < minDateTimestamp || year === minYear && month <= minMonth,
    onClick: function onClick() {
      return handleNextYearButton(-1, false);
    }
  }, /*#__PURE__*/React.createElement(TwoArrowsRight, {
    size: 10
  })), /*#__PURE__*/React.createElement(Styled.HeaderLeftArrow, {
    isDisabled: prevtMonthTimestamp < minDateTimestamp,
    onClick: function onClick() {
      return handleNextMonthButton(-1, true);
    }
  }, /*#__PURE__*/React.createElement(ArrowLeftOutline, {
    size: 10
  })), /*#__PURE__*/React.createElement(Styled.HeaderBody, null, /*#__PURE__*/React.createElement(Styled.HeaderBodyMonth, {
    onClick: function onClick() {
      return setShowMonthsDatePicker(true);
    }
  }, getMonthStr(month)), /*#__PURE__*/React.createElement(Styled.HeaderBodyYear, {
    onClick: function onClick() {
      return setShowYearsDatePicker(true);
    }
  }, year)), /*#__PURE__*/React.createElement(Styled.HeaderRightArrow, {
    isDisabled: nextMonthTimestamp >= maxDateTimestamp,
    onClick: function onClick() {
      return handlePrevMonthButton(1, false);
    }
  }, /*#__PURE__*/React.createElement(ArrowRightOutline, {
    size: 10
  })), /*#__PURE__*/React.createElement(Styled.HeaderRightArrows, {
    isDisabled: nextYearTimestamp > maxDateTimestamp || year === maxYear && month >= maxYear,
    onClick: function onClick() {
      return handleNextYearButton(1, true);
    }
  }, /*#__PURE__*/React.createElement(TwoArrowsLeft, {
    size: 10
  }))), /*#__PURE__*/React.createElement(Styled.CalendarBody, null, renderCalendar()), /*#__PURE__*/React.createElement(Styled.ButtonWrapper, null, /*#__PURE__*/React.createElement(Button, {
    onClick: function onClick() {
      return handleOpen(false);
    },
    size: "xs",
    color: "basic"
  }, "Cancel"), /*#__PURE__*/React.createElement(Button, {
    onClick: handleTodayButton,
    size: "xs",
    color: "secondary",
    disabled: isTodayDateDisabled
  }, "Today"))));
});
Calendar.defaultProps = {
  open: false,
  position: Position.BottomStart
};
export var propTypes = {
  value: PT.string,
  position: PT.oneOf(objectValues(Position)),
  calendarStyles: PT.object,
  popperOptions: popperPropTypes.popperOptions,
  anchorEl: PT.instanceOf(Element),
  onChange: PT.func,
  open: PT.bool,
  setOpen: PT.func
};
Calendar.propTypes = propTypes;
export default Calendar;