import { lightPalette } from '../../theme/roots/palette';
import { Color } from '../../utils/types/palette';
export var getDatePickerDaysColor = function getDatePickerDaysColor(day, isSelectedDay, isDisabled) {
  if (day.month !== 0 || isDisabled) return lightPalette[Color.TextSecondaryInvert];
  if (isSelectedDay) return lightPalette[Color.IconsInvert];
  return lightPalette[Color.TextPrimary];
};
export var isYearFormRegex = /^\d{4}$/;
export var getMaxMinDayTimeStamp = function getMaxMinDayTimeStamp(monthDetails, maxDay) {
  var toDayDate = monthDetails.find(function (day) {
    return day.date === maxDay;
  });
  return toDayDate === null || toDayDate === void 0 ? void 0 : toDayDate.timestamp;
};
export var getMaxDate = function getMaxDate(maxDate) {
  return {
    maxYear: new Date(maxDate).getFullYear(),
    maxMonth: new Date(maxDate).getMonth(),
    maxDay: new Date(maxDate).getDate(),
    maxDateTimestamp: new Date(maxDate).getTime()
  };
};
export var getMinDate = function getMinDate(minDate) {
  return {
    minYear: new Date(minDate).getFullYear(),
    minMonth: new Date(minDate).getMonth(),
    minDay: new Date(minDate).getDate(),
    minDateTimestamp: new Date(minDate).getTime()
  };
};
export var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
export var DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
export var HEADER_DAYS = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];
export var MONTHS_PICKER = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
var oneDay = 60 * 60 * 24 * 1000;
export var getTodayTimestamp = function getTodayTimestamp() {
  return Date.now() - Date.now() % oneDay + new Date().getTimezoneOffset() * 1000 * 60;
};
export var getMaxMinSelectedDay = function getMaxMinSelectedDay(maxDate, minDate, monthDetails, maxDay, minDay) {
  if (maxDate) return getMaxMinDayTimeStamp(monthDetails, maxDay);
  if (minDate) return getMaxMinDayTimeStamp(monthDetails, minDay);
  return getTodayTimestamp();
};
export var getCurrentDate = function getCurrentDate() {
  var date = new Date();
  var currentMonth = date.getMonth() + 1;
  if (currentMonth < 10) {
    currentMonth = "0".concat(currentMonth);
  }
  var currentDay = date.getDate();
  if (currentDay < 10) {
    currentDay = "0".concat(currentDay);
  }
  return "".concat(date.getFullYear(), "-").concat(currentMonth, "-").concat(currentDay);
};
export var getNumberOfDays = function getNumberOfDays(_year, _month) {
  return 40 - new Date(_year, _month, 40).getDate();
};
export var getDayDetails = function getDayDetails(args) {
  var date = args.index - args.firstDay;
  var day = args.index % 7;
  var prevMonth = args.month - 1;
  var prevYear = args.year;
  if (prevMonth < 0) {
    prevMonth = 11;
    prevYear--;
  }
  var prevMonthNumberOfDays = getNumberOfDays(prevYear, prevMonth);
  var _date = (date < 0 ? prevMonthNumberOfDays + date : date % args.numberOfDays) + 1;
  var month = date < 0 ? -1 : date >= args.numberOfDays ? 1 : 0;
  var timestamp = new Date(args.year, args.month, _date).getTime();
  return {
    date: _date,
    day: day,
    month: month,
    timestamp: timestamp,
    dayString: DAYS[day]
  };
};
export var getMonthDetails = function getMonthDetails(year, month) {
  var firstDay = new Date(year, month).getDay();
  var numberOfDays = getNumberOfDays(year, month);
  var monthArray = [];
  var rows = 6;
  var currentDay = null;
  var index = 0;
  var cols = 7;
  for (var row = 0; row < rows; row++) {
    for (var col = 0; col < cols; col++) {
      currentDay = getDayDetails({
        index: index,
        numberOfDays: numberOfDays,
        firstDay: firstDay,
        year: year,
        month: month
      });
      monthArray.push(currentDay);
      index++;
    }
  }
  return monthArray;
};
export var getNextPrevSelectedDayTimeStamp = function getNextPrevSelectedDayTimeStamp(year, month, offset) {
  var toDayDate = getMonthDetails(year, month + offset).find(function (day) {
    return day.month === 0 && day.date === 1;
  });
  return toDayDate === null || toDayDate === void 0 ? void 0 : toDayDate.timestamp;
};
export var getNextPrevYearSelectedDayTimeStamp = function getNextPrevYearSelectedDayTimeStamp(year, month, dayDate, offset) {
  var toDayDate = getMonthDetails(year + offset, month).find(function (day) {
    return day.date === dayDate;
  });
  return toDayDate === null || toDayDate === void 0 ? void 0 : toDayDate.timestamp;
};
export var getDateStringFromTimestamp = function getDateStringFromTimestamp(timestamp, month, year) {
  var dateObject = new Date(timestamp);
  var _month = month + 1;
  var date = dateObject.getDate();
  return "".concat(year, "-").concat(_month < 10 ? "0".concat(_month) : _month, "-").concat(date < 10 ? "0".concat(date) : date);
};
export var getMonthStr = function getMonthStr(month) {
  return MONTHS[Math.max(Math.min(11, month), 0)] || 'Month';
};
export var getDateFromDateString = function getDateFromDateString(dateValue) {
  var dateData = dateValue.split('-').map(function (d) {
    return Number.parseInt(d, 10);
  });
  if (dateData.length < 3) {
    return null;
  }
  var year = dateData[0];
  var month = dateData[1];
  var date = dateData[2];
  return {
    year: year,
    month: month,
    date: date
  };
};
export var getCalendarButtonsBackgroundColor = function getCalendarButtonsBackgroundColor(isYearChanged, isMonthChanged, isDisabled) {
  if (isYearChanged || isMonthChanged) {
    return lightPalette[Color.AccentPrimary];
  }
  if (isDisabled) {
    return lightPalette[Color.BackgroundStateless];
  }
  return lightPalette[Color.BackgroundStateless];
};
export var getCalendarButtonsColor = function getCalendarButtonsColor(isYearChanged, isMonthChanged, isDisabled) {
  if (isYearChanged || isMonthChanged) {
    return lightPalette[Color.IconsInvert];
  }
  if (isDisabled) {
    return lightPalette[Color.TextPlaceholder];
  }
  return lightPalette[Color.TextPrimary];
};