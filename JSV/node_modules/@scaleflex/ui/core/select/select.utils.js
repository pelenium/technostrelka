import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _typeof from "@babel/runtime/helpers/typeof";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
import React from 'react';
import { Tick } from '@scaleflex/icons/tick';
import { MenuItemActions, MenuItemLabel } from '../menu-item';
import { InputSize } from '../../utils/types';
import Styled from './select.styles';
export var getIconSize = function getIconSize(size) {
  switch (size) {
    case InputSize.Md:
      return 11;
    case InputSize.Sm:
    default:
      return 10;
  }
};
export var renderIcon = function renderIcon(_icon, size) {
  return _icon ? /*#__PURE__*/React.createElement(Styled.Icon, null, typeof _icon === 'function' ? _icon({
    size: getIconSize(size)
  }) : _icon) : undefined;
};
var generateChildren = function generateChildren(children) {
  var isActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var size = arguments.length > 2 ? arguments[2] : undefined;
  var hideMenuItemsActions = arguments.length > 3 ? arguments[3] : undefined;
  var miChildren = /*#__PURE__*/React.createElement(MenuItemLabel, null, children);
  if (isActive && children) {
    var miActions = /*#__PURE__*/React.createElement(MenuItemActions, null, /*#__PURE__*/React.createElement(Styled.TickIcon, null, /*#__PURE__*/React.createElement(Tick, {
      size: getIconSize(size)
    })));
    if (React.Children.count(children) === 1) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, miChildren, !hideMenuItemsActions && miActions);
    }
    if (React.Children.count(children) > 1 && !React.Children.toArray(children).some(function (child) {
      var _child$type;
      return (child === null || child === void 0 ? void 0 : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.displayName) === 'MenuItemActions';
    })) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, children, miActions);
    }
  }
  return miChildren;
};
export var renderOption = function renderOption(menuItem, _ref) {
  var _type, _props, _props2, _props3;
  var value = _ref.value,
    _ref$multiple = _ref.multiple,
    multiple = _ref$multiple === void 0 ? false : _ref$multiple,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Md : _ref$size,
    _ref$hideMenuItemsAct = _ref.hideMenuItemsActions,
    hideMenuItemsActions = _ref$hideMenuItemsAct === void 0 ? false : _ref$hideMenuItemsAct,
    onClose = _ref.onClose,
    onChange = _ref.onChange;
  if (! /*#__PURE__*/React.isValidElement(menuItem)) {
    return menuItem;
  }
  if (((_type = menuItem.type) === null || _type === void 0 ? void 0 : _type.displayName) !== 'MenuItem') {
    return /*#__PURE__*/React.cloneElement(menuItem);
  }
  var menuItemValue = menuItem === null || menuItem === void 0 ? void 0 : (_props = menuItem.props) === null || _props === void 0 ? void 0 : _props.value;
  var valueArr = multiple ? Array.isArray(value) ? value : [] : [value];
  var active = valueArr.length > 0 && valueArr.includes(menuItemValue);
  var isDisabledMenuItem = menuItem === null || menuItem === void 0 ? void 0 : (_props2 = menuItem.props) === null || _props2 === void 0 ? void 0 : _props2.disabled;
  return /*#__PURE__*/React.cloneElement(menuItem, {
    active: active,
    size: size,
    children: generateChildren(menuItem === null || menuItem === void 0 ? void 0 : (_props3 = menuItem.props) === null || _props3 === void 0 ? void 0 : _props3.children, active, size, hideMenuItemsActions),
    onClick: function onClick() {
      var _menuItemValue$toStri;
      if (!multiple && typeof onClose === 'function') {
        onClose();
      }
      if (typeof onChange === 'function' && !isDisabledMenuItem && !!(menuItemValue !== null && menuItemValue !== void 0 && (_menuItemValue$toStri = menuItemValue.toString()) !== null && _menuItemValue$toStri !== void 0 && _menuItemValue$toStri.length)) {
        var newValue = menuItemValue;
        if (multiple) {
          newValue = _toConsumableArray(Array.isArray(value) ? value : []);
          var index = newValue.indexOf(menuItemValue);
          if (index > -1) {
            newValue.splice(index, 1);
          } else {
            newValue.push(menuItemValue);
          }
        }
        onChange(newValue);
      }
    }
  });
};
var getOptionValue = function getOptionValue(option) {
  var children = option.props ? option.props.children : option;
  if (Array.isArray(children)) return children.map(function (child) {
    return getOptionValue(child);
  }).join(' ');
  if (_typeof(children) === 'object') return getOptionValue(children.props.children);
  return children;
};
var renderOptionValue = function renderOptionValue(option, showSelectionKey) {
  if (option && option.children) {
    var child = showSelectionKey ? option.value : option.children;
    while (typeof child !== 'string') {
      if (Array.isArray(child)) {
        child = getOptionValue(child[1]);
      } else {
        child = getOptionValue(child);
      }
    }
    return child;
  }
};
export var renderValue = function renderValue(_ref2) {
  var value = _ref2.value,
    _ref2$multiple = _ref2.multiple,
    multiple = _ref2$multiple === void 0 ? false : _ref2$multiple,
    children = _ref2.children,
    _ref2$showSelectionKe = _ref2.showSelectionKey,
    showSelectionKey = _ref2$showSelectionKe === void 0 ? false : _ref2$showSelectionKe;
  var optionsProps = [];
  React.Children.forEach(children, function (child) {
    if ( /*#__PURE__*/React.isValidElement(child)) {
      var _type2 = child === null || child === void 0 ? void 0 : child.type,
        displayName = _type2.displayName;
      if (displayName === 'MenuItem' && Boolean(child.props)) {
        optionsProps.push(_objectSpread({}, child.props));
      }
    }
  });
  var activeOptions = multiple ? optionsProps.filter(function (itemProps) {
    return Array.isArray(value) && value.includes(itemProps.value);
  }) : [optionsProps.find(function (itemProps) {
    return itemProps.value === value;
  })];
  if (activeOptions.length > 0) {
    return activeOptions.map(function (option) {
      return renderOptionValue(option, showSelectionKey);
    }).join(', ');
  }
  return Array.isArray(value) ? value.join(', ') : value;
};