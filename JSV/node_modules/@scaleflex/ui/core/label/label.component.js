import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "iconStart", "iconEnd", "error", "disabled", "size", "type"];
import React, { useState, useRef } from 'react';
import PT from 'prop-types';
import { intrinsicComponent, objectValues } from '../../utils/functions';
import { InputSize } from '../../utils/types';
import { Type } from './types';
import Styled from './label.styles';
var Label = intrinsicComponent(function (_ref, ref) {
  var children = _ref.children,
    iconStart = _ref.iconStart,
    iconEnd = _ref.iconEnd,
    error = _ref.error,
    disabled = _ref.disabled,
    size = _ref.size,
    type = _ref.type,
    rest = _objectWithoutProperties(_ref, _excluded);
  var textRef = useRef(null);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isEllipsisActive = _useState2[0],
    setIsEllipsisActive = _useState2[1];
  var renderIcon = function renderIcon(icon, end) {
    return /*#__PURE__*/React.createElement(Styled.Icon, {
      $end: end
    }, typeof icon === 'function' ? icon({
      size: size === 'md' ? 14 : 12
    }) : icon);
  };
  var getTextTooltip = function getTextTooltip() {
    if (typeof children === 'string' && isEllipsisActive) {
      return children;
    }
  };
  var handleTextTooltip = function handleTextTooltip() {
    if (textRef.current !== null && textRef.current) {
      var _textRef$current, _textRef$current2;
      setIsEllipsisActive((textRef === null || textRef === void 0 ? void 0 : (_textRef$current = textRef.current) === null || _textRef$current === void 0 ? void 0 : _textRef$current.offsetWidth) < (textRef === null || textRef === void 0 ? void 0 : (_textRef$current2 = textRef.current) === null || _textRef$current2 === void 0 ? void 0 : _textRef$current2.scrollWidth));
    }
  };
  return /*#__PURE__*/React.createElement(Styled.Label, _extends({
    ref: ref,
    error: error,
    disabled: disabled,
    size: size,
    type: type
  }, rest), iconStart && renderIcon(iconStart, false), /*#__PURE__*/React.createElement(Styled.Text, {
    title: getTextTooltip(),
    onMouseOver: handleTextTooltip,
    ref: textRef
  }, children), iconEnd && renderIcon(iconEnd, true));
});
Label.defaultProps = {
  type: Type.Default,
  error: false
};
export var propTypes = {
  type: PT.oneOf(objectValues(Type)),
  iconStart: PT.oneOfType([PT.node, PT.func]),
  iconEnd: PT.oneOfType([PT.node, PT.func]),
  error: PT.bool,
  size: PT.oneOf(objectValues(InputSize)),
  htmlFor: PT.string
};
Label.propTypes = propTypes;
export default Label;