import styled, { css } from 'styled-components';
import { generateClassNames, applyDisplayNames } from '../../utils/functions';
import { InputSize } from '../../utils/types';
import { Color as PColor } from '../../utils/types/palette';
import { errorMixin } from './label.mixin';
import { sizeInputLabelMixin } from '../input/input.mixin';
var baseClassName = 'Label';
var Label = /*#__PURE__*/styled.label.attrs({
  className: generateClassNames(baseClassName, 'root')
}).withConfig({
  componentId: "sc-16k2ql4-0"
})(function (_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Md : _ref$size,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    htmlFor = _ref.htmlFor,
    theme = _ref.theme;
  return css(["display:flex;align-items:center;color:", ";font-style:normal;font-weight:normal;", " ", " cursor:", ";", ";"], theme.palette[PColor.TextSecondary], disabled && css(["color:", ";", "{color:", ";}"], theme.palette[PColor.ButtonDisabledText], Icon, theme.palette[PColor.IconsMuted]), sizeInputLabelMixin[size], htmlFor && 'pointer', error && errorMixin);
});
var Text = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'text')
}).withConfig({
  componentId: "sc-16k2ql4-1"
})(["white-space:nowrap;text-overflow:ellipsis;overflow:hidden;"]);
var Icon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'Icon')
}).withConfig({
  componentId: "sc-16k2ql4-2"
})(function (_ref2) {
  var palette = _ref2.theme.palette,
    _ref2$$end = _ref2.$end,
    $end = _ref2$$end === void 0 ? false : _ref2$$end;
  return css(["display:flex;", ";color:", ";"], $end ? 'margin-left: 4px' : 'margin-right: 4px', palette[PColor.IconsSecondary]);
});
var Styled = applyDisplayNames({
  Label: Label,
  Icon: Icon,
  Text: Text
});
export default Styled;