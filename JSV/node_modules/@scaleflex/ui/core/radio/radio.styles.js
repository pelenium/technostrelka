import styled, { css } from 'styled-components';
import { generateClassNames, applyDisplayNames } from '../../utils/functions';
import { Color as PColor } from '../../utils/types/palette';
import { RadioSize } from './size';
import { sizeInnerRadioMixin, sizeRadioMixin } from './radio.mixin';
var baseClassName = 'Radio';
var Radio = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'root')
}).withConfig({
  componentId: "sc-xr271d-0"
})(function (_ref) {
  var disabled = _ref.disabled,
    theme = _ref.theme;
  return css(["position:relative;display:inline-flex;align-items:inherit;justify-content:inherit;cursor:", ";color:", ";"], disabled ? 'default' : 'pointer', theme.palette[PColor.AccentPrimary]);
});
var RadioBox = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'radio')
}).withConfig({
  componentId: "sc-xr271d-1"
})(function (_ref2) {
  var disabled = _ref2.disabled,
    _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? RadioSize.Sm : _ref2$size,
    theme = _ref2.theme;
  return css(["border-radius:50%;border:1px solid ", ";", " &::before{position:absolute;content:'';top:50%;left:50%;display:block;background:", ";border-radius:50%;cursor:", ";transform:translate(-50%,-50%);opacity:0;", "}&::after{content:'';width:100%;height:100%;display:block;background:", ";border-radius:50%;cursor:", ";opacity:", ";}"], disabled ? theme.palette[PColor.BordersSecondary] : theme.palette[PColor.BorderPrimaryStateless], sizeRadioMixin[size], theme.palette[PColor.AccentStateless_0_4_Opacity], disabled ? 'default' : 'pointer', sizeInnerRadioMixin[size], disabled ? theme.palette[PColor.BackgroundActive] : theme.palette[PColor.AccentStateless], disabled ? 'default' : 'pointer', disabled ? 1 : 0);
});
var Input = /*#__PURE__*/styled.input.attrs({
  className: generateClassNames(baseClassName, 'Input'),
  type: 'radio'
}).withConfig({
  componentId: "sc-xr271d-2"
})(function (_ref3) {
  var disabled = _ref3.disabled,
    _ref3$size = _ref3.size,
    size = _ref3$size === void 0 ? RadioSize.Sm : _ref3$size,
    theme = _ref3.theme;
  return css(["position:absolute;opacity:0;border:1px solid ", ";border-radius:50%;cursor:", ";margin:0;z-index:99;", " &:hover + ", "{&::before{opacity:", ";transition:all 100ms ease-out;}}&:checked + ", "{&::before{opacity:1;background:", ";transition:all 100ms ease-out;}&::after{opacity:1;background:", ";transition:all 100ms ease-out;}}"], theme.palette[PColor.BorderPrimaryStateless], disabled ? 'default' : 'pointer', sizeRadioMixin[size], RadioBox, disabled ? 0 : 1, RadioBox, theme.palette[PColor.IconsInvert], disabled ? theme.palette[PColor.BackgroundGrey] : theme.palette[PColor.AccentStateless]);
});
var Styled = applyDisplayNames({
  Radio: Radio,
  Input: Input,
  RadioBox: RadioBox
});
export default Styled;