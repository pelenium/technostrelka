import styled, { css } from 'styled-components';
import { generateClassNames, applyDisplayNames } from '../../utils/functions';
import { Color as PColor } from '../../utils/types/palette';
import { BorderRadiusSize as BRSize } from '../../utils/types/shape';
import { sizeTagLabelMixin, sizeTagCrossMixin } from './tag.mixin';
import { Size, Type } from './types';
var baseClassName = 'Tag';
var Cross = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'Icon')
}).withConfig({
  componentId: "sc-d1zfus-0"
})(function (_ref) {
  var theme = _ref.theme;
  return css(["display:inline-flex;color:", ";cursor:pointer;"], theme.palette[PColor.IconsSecondary]);
});
var StartIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'StartIcon')
}).withConfig({
  componentId: "sc-d1zfus-1"
})(function () {
  return css(["display:flex;justify-content:center;align-items:center;margin-right:6px;"]);
});
var Label = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'Label')
}).withConfig({
  componentId: "sc-d1zfus-2"
})(function (_ref2) {
  var theme = _ref2.theme;
  return css(["display:flex;align-items:center;outline:none;color:", ";"], theme.palette[PColor.TextPrimary]);
});
var Tag = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'root')
}).withConfig({
  componentId: "sc-d1zfus-3"
})(function (_ref3) {
  var _ref3$size = _ref3.size,
    size = _ref3$size === void 0 ? Size.Md : _ref3$size,
    _ref3$type = _ref3.type,
    type = _ref3$type === void 0 ? Type.Default : _ref3$type,
    onSelect = _ref3.onSelect,
    theme = _ref3.theme;
  return css(["position:relative;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;transition:all 100ms ease-out;background-color:", ";border:1px solid ", ";border-radius:", ";", " &:hover{background-color:", ";border:1px solid ", ";", "{color:", ";}", "{color:", ";}", " ", "}&:not(:hover){", "}", "{", "}"], theme.palette[PColor.BordersSecondary], theme.palette[PColor.BorderPrimaryStateless], theme.shape.borderRadius[BRSize.Md], sizeTagLabelMixin[size], theme.palette[PColor.BackgroundActive], theme.palette[PColor.IconsSecondaryHover], Label, theme.palette[PColor.TextPrimary], Cross, theme.palette[PColor.IconsSecondaryHover], type === Type.Suggested && onSelect && css(["cursor:pointer;"]), type === Type.Suggested && css(["border:1px dashed ", ";background-color:", ";", "{color:", ";}", "{color:", ";}"], theme.palette[PColor.IconsSecondaryHover], theme.palette[PColor.BackgroundActive], Label, theme.palette[PColor.LinkHover], Cross, theme.palette[PColor.IconsSecondaryHover]), type === Type.Suggested && css(["border:1px dashed ", ";background:transparent;", "{color:", ";}", "{color:", ";}"], theme.palette[PColor.BorderPrimaryStateless], Label, theme.palette[PColor.LinkStateless], Cross, theme.palette[PColor.IconsSecondary]), Cross, sizeTagCrossMixin[size]);
});
var Styled = applyDisplayNames({
  Tag: Tag,
  StartIcon: StartIcon,
  Label: Label,
  Cross: Cross
});
export default Styled;