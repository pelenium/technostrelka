import styled, { css } from 'styled-components';
import { generateClassNames, applyDisplayNames } from '../../utils/functions';
import { Color as PColor } from '../../utils/types/palette';
import { sizeCheckboxMixin } from './check-box.mixin';
import { Size } from './types';
var baseClassName = 'CheckBox';
var Input = /*#__PURE__*/styled.input.attrs({
  className: generateClassNames(baseClassName, 'Input'),
  type: 'checkbox'
}).withConfig({
  componentId: "sc-1rkixul-0"
})(function (_ref) {
  var _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled;
  return css(["position:absolute;top:0;left:0;width:100%;height:100%;margin:0;opacity:0;padding:0;cursor:", ";z-index:1;"], disabled ? 'default' : 'pointer');
});
var UnCheckedIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'icon')
}).withConfig({
  componentId: "sc-1rkixul-1"
})(function () {
  return css(["display:flex;opacity:0;transition:all 100ms ease-out;"]);
});
var CheckBox = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'root')
}).withConfig({
  componentId: "sc-1rkixul-2"
})(function (_ref2) {
  var palette = _ref2.theme.palette,
    _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? Size.Sm : _ref2$size,
    checked = _ref2.checked,
    _ref2$disabled = _ref2.disabled,
    disabled = _ref2$disabled === void 0 ? false : _ref2$disabled;
  return css(["position:relative;display:flex;align-items:center;justify-content:center;background:", ";border:1px solid ", ";border-radius:1px;outline:none;text-align:center;transition:all 100ms ease-out;cursor:", ";", " &:hover{", "{", "}}", ""], checked ? palette[PColor.AccentPrimary] : palette[PColor.BackgroundStateless], checked ? palette[PColor.AccentPrimary] : palette[PColor.BackgroundPrimaryStateless], disabled ? 'default' : 'pointer', sizeCheckboxMixin[size], UnCheckedIcon, !disabled && css(["opacity:1;"]), disabled && css(["background:", ";border:1px solid ", ";"], checked ? palette[PColor.BackgroundGrey] : palette[PColor.BackgroundActive], checked ? palette[PColor.BackgroundGrey] : palette[PColor.BordersSecondary]));
});
var Styled = applyDisplayNames({
  CheckBox: CheckBox,
  Input: Input,
  UnCheckedIcon: UnCheckedIcon
});
export default Styled;