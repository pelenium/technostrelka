import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["onChange", "value", "size"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
import React from 'react';
import SearchIcon from '@scaleflex/icons/search';
import { intrinsicComponent } from '../../utils/functions';
import { InputSize } from '../../utils/types';
import CrossButton from '../cross-button/cross-button.component';
import Input from '../input';
import Styled from './search.styles';
import { defaultProps as inputDefaultProps, propTypes as inputPropTypes } from '../input/input.component';
var Search = intrinsicComponent(function (_ref, ref) {
  var onChange = _ref.onChange,
    _ref$value = _ref.value,
    value = _ref$value === void 0 ? '' : _ref$value,
    size = _ref.size,
    rest = _objectWithoutProperties(_ref, _excluded);
  var handleClearIconClick = function handleClearIconClick(event) {
    if (onChange) {
      onChange(event);
    }
  };
  var getSearchIconSize = function getSearchIconSize(sizeName) {
    switch (sizeName) {
      case InputSize.Sm:
        return 16;
      case InputSize.Md:
      default:
        return 18;
    }
  };
  return /*#__PURE__*/React.createElement(Styled.Search, {
    size: size
  }, /*#__PURE__*/React.createElement(Input, _extends({
    ref: ref,
    value: value,
    size: size
  }, rest, {
    onChange: onChange,
    iconStart: function iconStart(iconProps) {
      return /*#__PURE__*/React.createElement(SearchIcon, _extends({}, iconProps, {
        size: getSearchIconSize(size)
      }));
    },
    clearIcon: (value === null || value === void 0 ? void 0 : value.length) !== 0 ? /*#__PURE__*/React.createElement(CrossButton, {
      size: size
    }) : undefined,
    clearIconClick: handleClearIconClick
  })));
});
Search.defaultProps = _objectSpread({}, inputDefaultProps);
var iconStart = inputPropTypes.iconStart,
  restInputPropTypes = _objectWithoutProperties(inputPropTypes, ["iconStart"]);
Search.propTypes = restInputPropTypes;
export default Search;