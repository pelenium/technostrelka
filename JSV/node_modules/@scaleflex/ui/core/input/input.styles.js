import styled, { css } from 'styled-components';
import { generateClassNames, applyDisplayNames } from '../../utils/functions';
import { FontVariant as FV } from '../../utils/types/typography';
import { Color as PColor } from '../../utils/types/palette';
import { BorderRadiusSize as BRSize } from '../../utils/types/shape';
import { sizeInputMixin, fontSizeInputMixin, errorMixin } from './input.mixin';
import { InputSize } from '../../utils/types';
import { getInputBackgroundColor, getInputTextColor, getInputBorderColor } from './input.utils';
var baseClassName = 'Input';
var Icon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'Icon')
}).withConfig({
  componentId: "sc-150k0cz-0"
})(function (_ref) {
  var iconClickStart = _ref.iconClickStart,
    iconClickEnd = _ref.iconClickEnd,
    disabled = _ref.disabled,
    readOnly = _ref.readOnly,
    iconType = _ref.iconType,
    palette = _ref.theme.palette;
  return css(["display:flex;color:", ";cursor:", ";", ""], palette[PColor.IconsPrimary], (iconClickStart || iconClickEnd) && !disabled && !readOnly ? 'pointer' : 'default', iconType === 'end' && css(["color:", ";"], palette[PColor.IconsSecondary]));
});
var CopyIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'CopyIcon')
}).withConfig({
  componentId: "sc-150k0cz-1"
})(function (_ref2) {
  var palette = _ref2.theme.palette;
  return css(["display:flex;color:", ";cursor:pointer;"], palette[PColor.IconsSecondary]);
});
var PasswordIcon = /*#__PURE__*/styled(CopyIcon).attrs({
  className: generateClassNames(baseClassName, 'PasswordIcon')
}).withConfig({
  componentId: "sc-150k0cz-2"
})([""]);
var Container = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'Container')
}).withConfig({
  componentId: "sc-150k0cz-3"
})(function () {
  return css(["display:block;color:inherit;font-size:inherit;width:100%;min-width:0;margin:0;padding:0;border:0;background-color:transparent;outline:none;"]);
});
var Base = /*#__PURE__*/styled.input.attrs({
  className: generateClassNames(baseClassName, 'Base')
}).withConfig({
  componentId: "sc-150k0cz-4"
})(function (_ref3) {
  var palette = _ref3.theme.palette,
    _ref3$isEllipsis = _ref3.isEllipsis,
    isEllipsis = _ref3$isEllipsis === void 0 ? false : _ref3$isEllipsis;
  return css(["display:block;color:inherit;width:100%;min-width:fit-content;margin:0;padding:0;border:0;background-color:transparent;outline:none;", " &::placeholder{color:", ";}"], isEllipsis && css(["text-overflow:ellipsis;"]), palette[PColor.TextPlaceholder]);
});
var Input = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'root')
}).withConfig({
  componentId: "sc-150k0cz-5"
})(function (_ref4) {
  var _ref4$size = _ref4.size,
    size = _ref4$size === void 0 ? InputSize.Md : _ref4$size,
    _ref4$error = _ref4.error,
    error = _ref4$error === void 0 ? false : _ref4$error,
    _ref4$fullWidth = _ref4.fullWidth,
    fullWidth = _ref4$fullWidth === void 0 ? false : _ref4$fullWidth,
    _ref4$readOnly = _ref4.readOnly,
    readOnly = _ref4$readOnly === void 0 ? false : _ref4$readOnly,
    _ref4$disabled = _ref4.disabled,
    disabled = _ref4$disabled === void 0 ? false : _ref4$disabled,
    _ref4$isHovering = _ref4.isHovering,
    isHovering = _ref4$isHovering === void 0 ? false : _ref4$isHovering,
    _ref4$isSelectedItems = _ref4.isSelectedItems,
    isSelectedItems = _ref4$isSelectedItems === void 0 ? false : _ref4$isSelectedItems,
    theme = _ref4.theme;
  return css(["position:relative;display:inline-flex;align-items:center;box-sizing:border-box;column-gap:8px;cursor:text;transition:all 100ms ease-out;width:", ";pointer-events:", ";background-color:", ";border-radius:", ";border:1px solid ", ";color:", ";", " ", ";", "{", "}", " ", " &:hover{color:", ";}", ""], fullWidth ? '100%' : '300px', disabled ? 'none' : 'auto', getInputBackgroundColor(readOnly, disabled), theme.shape.borderRadius[BRSize.Md], getInputBorderColor(readOnly, disabled), disabled ? theme.palette[PColor.TextPlaceholder] : theme.palette[PColor.TextPrimary], sizeInputMixin[size], isSelectedItems && "\n      height: fit-content;\n\n      ".concat(Base, " {\n        max-width: fit-content;\n        min-width: 20px;\n        flex-grow: 1;\n        width: 40px;\n      }\n    "), Base, fontSizeInputMixin[size], !readOnly && !disabled && css(["&:focus-within{background-color:", "!important;border:1px solid ", ";&:hover{border:1px solid ", ";", "{color:", ";}}}", " &:hover{background-color:", ";border:1px solid ", ";", "{color:", ";}}"], theme.palette[PColor.BackgroundSecondary], theme.palette[PColor.AccentStateless], theme.palette[PColor.AccentStateless], Icon, theme.palette[PColor.IconsPrimary], isHovering && css(["", "{color:", ";}"], Icon, theme.palette[PColor.IconsPrimaryHover]), theme.palette[PColor.BackgroundStateless], theme.palette[PColor.BordersPrimaryHover], Icon, theme.palette[PColor.IconsPrimaryHover]), disabled && css(["", "{color:", ";}"], Icon, theme.palette[PColor.IconsMuted]), getInputTextColor(readOnly, disabled), error && errorMixin);
});
var ClearIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'ClearIcon')
}).withConfig({
  componentId: "sc-150k0cz-6"
})(function (_ref5) {
  var palette = _ref5.theme.palette;
  return css(["display:flex;cursor:pointer;color:", ";"], palette[PColor.IconsPrimary]);
});
var NotificationBox = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'NotificationBox')
}).withConfig({
  componentId: "sc-150k0cz-7"
})(function (_ref6) {
  var _ref6$size = _ref6.size,
    size = _ref6$size === void 0 ? InputSize.Md : _ref6$size,
    palette = _ref6.theme.palette;
  return css(["display:flex;position:absolute;align-items:center;max-height:34px;right:0px;padding:8px 12px;column-gap:6px;bottom:", ";box-shadow:0px 2px 6px ", ";background-color:", ";border-radius:4px;"], size === InputSize.Md ? '45px' : '35px', palette[PColor.LargeShadow], palette[PColor.BackgroundStateless]);
});
var NotificationIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'NotificationIcon')
}).withConfig({
  componentId: "sc-150k0cz-8"
})(function (_ref7) {
  var palette = _ref7.theme.palette;
  return css(["color:", ";"], palette[PColor.IconsPrimary]);
});
var NotificationText = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'NotificationText')
}).withConfig({
  componentId: "sc-150k0cz-9"
})(function (_ref8) {
  var _ref8$theme = _ref8.theme,
    palette = _ref8$theme.palette,
    font = _ref8$theme.typography.font;
  return css(["white-space:nowrap;", ";color:", ";"], font[FV.TextSmall], palette[PColor.TextPrimary]);
});
var FieldWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'fieldWrapper')
}).withConfig({
  componentId: "sc-150k0cz-10"
})(function (_ref9) {
  var isSelectedItems = _ref9.isSelectedItems;
  return css(["width:100%;height:100%;display:inline-flex;flex-wrap:wrap;gap:8px;max-height:120px;", ";::-webkit-scrollbar{display:none;}"], isSelectedItems && "\n      overflow-y: auto;\n    ");
});
var Styled = applyDisplayNames({
  Input: Input,
  Container: Container,
  Base: Base,
  Icon: Icon,
  CopyIcon: CopyIcon,
  PasswordIcon: PasswordIcon,
  ClearIcon: ClearIcon,
  NotificationBox: NotificationBox,
  NotificationIcon: NotificationIcon,
  NotificationText: NotificationText,
  FieldWrapper: FieldWrapper
});
export default Styled;