import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["inputType", "children", "iconStart", "iconEnd", "iconChange", "clearIcon", "iconClickStart", "iconClickEnd", "clearIconClick", "size", "className", "style", "fullWidth", "readOnly", "disabled", "hideCopyIcon", "focusOnMount", "focusOnClick", "isEllipsis", "copyTextMessage", "copySuccessIcon", "error", "renderTags", "showPlaceholder"];
import React, { useState, useRef, useEffect } from 'react';
import PT from 'prop-types';
import CopyOutline from '@scaleflex/icons/copy-outline';
import EyeOpen from '@scaleflex/icons/eye-open';
import EyeClosed from '@scaleflex/icons/eye-closed';
import { intrinsicComponent, objectValues } from '../../utils/functions';
import { InputSize } from '../../utils/types';
import { handleCopyIcon } from './input.utils';
import { Type } from './types';
import Styled from './input.styles';
var getIconSize = function getIconSize(sizeName, iconType) {
  switch (sizeName) {
    case InputSize.Md:
      return iconType === 'start' ? 15 : 14;
    case InputSize.Sm:
    default:
      return iconType === 'start' ? 13 : 10;
  }
};
var getPasswordIconSize = function getPasswordIconSize(sizeName) {
  switch (sizeName) {
    case InputSize.Md:
      return 16;
    case InputSize.Sm:
    default:
      return 14;
  }
};
var Input = intrinsicComponent(function (_ref, ref) {
  var _rest$selectedItems;
  var inputType = _ref.inputType,
    children = _ref.children,
    iconStart = _ref.iconStart,
    iconEnd = _ref.iconEnd,
    iconChange = _ref.iconChange,
    clearIcon = _ref.clearIcon,
    iconClickStart = _ref.iconClickStart,
    iconClickEnd = _ref.iconClickEnd,
    clearIconClick = _ref.clearIconClick,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Md : _ref$size,
    className = _ref.className,
    style = _ref.style,
    fullWidth = _ref.fullWidth,
    readOnly = _ref.readOnly,
    disabled = _ref.disabled,
    _ref$hideCopyIcon = _ref.hideCopyIcon,
    hideCopyIcon = _ref$hideCopyIcon === void 0 ? false : _ref$hideCopyIcon,
    _ref$focusOnMount = _ref.focusOnMount,
    focusOnMount = _ref$focusOnMount === void 0 ? false : _ref$focusOnMount,
    _ref$focusOnClick = _ref.focusOnClick,
    focusOnClick = _ref$focusOnClick === void 0 ? true : _ref$focusOnClick,
    _ref$isEllipsis = _ref.isEllipsis,
    isEllipsis = _ref$isEllipsis === void 0 ? false : _ref$isEllipsis,
    copyTextMessage = _ref.copyTextMessage,
    copySuccessIcon = _ref.copySuccessIcon,
    error = _ref.error,
    renderTags = _ref.renderTags,
    showPlaceholder = _ref.showPlaceholder,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isHovering = _useState2[0],
    setIsHovering = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    showCopyMessage = _useState4[0],
    setShowCopyMessage = _useState4[1];
  var _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    isVisible = _useState6[0],
    setIsVisible = _useState6[1];
  var inputRef = useRef(null);
  var isSelectedItems = (_rest$selectedItems = rest.selectedItems) === null || _rest$selectedItems === void 0 ? void 0 : _rest$selectedItems.length;
  var placeholder = rest.value || isSelectedItems ? '' : rest.placeholder;
  var handleFocus = function handleFocus() {
    var _inputRef$current;
    if (disabled || readOnly) return;
    showPlaceholder === null || showPlaceholder === void 0 ? void 0 : showPlaceholder(false);
    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();
  };
  useEffect(function () {
    if (focusOnMount) {
      handleFocus();
    }
  }, []);
  useEffect(function () {
    setTimeout(function () {
      return setShowCopyMessage(false);
    }, 2000);
  }, [showCopyMessage]);
  var handleEntering = function handleEntering() {
    setTimeout(function () {
      setIsHovering(true);
    }, 150);
  };
  var handleLeaving = function handleLeaving() {
    setTimeout(function () {
      setIsHovering(false);
    }, 200);
  };
  var handleIconClick = function handleIconClick(event, type) {
    if (disabled || readOnly) return;
    if (focusOnClick) {
      handleFocus();
    }
    if (type === 'start') {
      if (iconClickStart) {
        iconClickStart(event);
      }
    } else if (type === 'end') {
      if (iconClickEnd) {
        iconClickEnd(event);
      }
    } else if (clearIconClick) {
      clearIconClick(event);
    }
  };
  var renderIcon = function renderIcon(_icon, type) {
    return _icon ? /*#__PURE__*/React.createElement(Styled.Icon, {
      onClick: function onClick(event) {
        return handleIconClick(event, type);
      },
      iconClickStart: iconClickStart,
      iconClickEnd: iconClickEnd,
      iconType: type,
      disabled: disabled,
      readOnly: readOnly
    }, typeof _icon === 'function' ? _icon({
      size: getIconSize(size, type)
    }) : _icon) : undefined;
  };
  var renderClearIcon = function renderClearIcon() {
    return disabled || readOnly || !clearIcon ? undefined : /*#__PURE__*/React.createElement(Styled.ClearIcon, {
      onClick: function onClick(event) {
        return handleIconClick(event, 'clear');
      }
    }, typeof clearIcon === 'function' ? clearIcon({
      size: getIconSize(size, 'clear')
    }) : clearIcon);
  };
  var renderCopyIcon = function renderCopyIcon(icon) {
    return isHovering && readOnly && !hideCopyIcon ? /*#__PURE__*/React.createElement(Styled.CopyIcon, {
      onClick: function onClick() {
        return handleCopyIcon(rest.value, setShowCopyMessage);
      }
    }, typeof icon === 'function' ? icon() : icon) : undefined;
  };
  var toggleVisibility = function toggleVisibility(event) {
    event.stopPropagation();
    setIsVisible(!isVisible);
  };
  var renderPasswordIcon = function renderPasswordIcon() {
    return /*#__PURE__*/React.createElement(Styled.PasswordIcon, {
      onClick: function onClick(event) {
        return toggleVisibility(event);
      }
    }, isVisible ? /*#__PURE__*/React.createElement(EyeClosed, {
      size: getPasswordIconSize(size)
    }) : /*#__PURE__*/React.createElement(EyeOpen, {
      size: getPasswordIconSize(size)
    }));
  };
  var getInputType = function getInputType() {
    if (!inputType && rest !== null && rest !== void 0 && rest.type) {
      return rest === null || rest === void 0 ? void 0 : rest.type;
    }
    if (inputType === Type.Password && !isVisible) {
      return Type.Password;
    }
    return Type.Text;
  };
  var renderField = function renderField() {
    return /*#__PURE__*/React.createElement(Styled.FieldWrapper, {
      isSelectedItems: Boolean(isSelectedItems)
    }, renderTags && renderTags(), /*#__PURE__*/React.createElement(Styled.Base, _extends({}, rest, {
      placeholder: placeholder,
      ref: inputRef,
      readOnly: Boolean(readOnly),
      type: getInputType(),
      isEllipsis: isEllipsis
    })));
  };
  var renderCopyText = function renderCopyText() {
    return /*#__PURE__*/React.createElement(Styled.NotificationBox, {
      size: size
    }, /*#__PURE__*/React.createElement(Styled.NotificationIcon, null, copySuccessIcon), /*#__PURE__*/React.createElement(Styled.NotificationText, null, copyTextMessage));
  };
  return /*#__PURE__*/React.createElement(Styled.Input, {
    onClick: focusOnClick ? handleFocus : undefined,
    ref: ref,
    size: size,
    onMouseEnter: handleEntering,
    onMouseLeave: handleLeaving,
    className: className,
    style: style,
    readOnly: readOnly,
    disabled: disabled,
    fullWidth: Boolean(fullWidth),
    error: error,
    clearIcon: clearIcon,
    isHovering: rest.isHovering,
    isSelectedItems: Boolean(isSelectedItems)
  }, renderIcon(iconStart, 'start'), renderField(), renderCopyIcon( /*#__PURE__*/React.createElement(CopyOutline, {
    size: getIconSize(size, 'copy')
  })), showCopyMessage && renderCopyText(), renderClearIcon(), inputType === Type.Password && renderPasswordIcon(), renderIcon(iconEnd, 'end'), renderIcon(iconChange, ''), children && /*#__PURE__*/React.createElement(React.Fragment, null, children));
});
export var defaultProps = {
  size: InputSize.Md,
  error: false,
  fullWidth: false,
  readOnly: false,
  disabled: false,
  copyTextMessage: 'Copied!'
};
Input.defaultProps = defaultProps;
export var propTypes = {
  size: PT.oneOf(objectValues(InputSize)),
  iconStart: PT.oneOfType([PT.node, PT.func]),
  iconEnd: PT.oneOfType([PT.node, PT.func]),
  iconChange: PT.oneOfType([PT.node, PT.func]),
  copySuccessIcon: PT.oneOfType([PT.node, PT.func]),
  clearIcon: PT.node,
  error: PT.bool,
  fullWidth: PT.bool,
  value: PT.any,
  readOnly: PT.bool,
  disabled: PT.bool,
  iconClickStart: PT.func,
  showPlaceholder: PT.func,
  iconClickEnd: PT.func,
  clearIconClick: PT.func,
  focusOnMount: PT.bool,
  focusOnClick: PT.bool,
  copyTextMessage: PT.string,
  inputType: PT.string,
  renderTags: PT.func
};
Input.propTypes = propTypes;
export default Input;