import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "open", "iconsSize", "collapsed", "top", "hideBackdrop", "disablePortal", "collapseButtonLabel", "persistentDrawerStyles", "temproryDrawerStyles", "variant", "onClose", "onCollapse", "onCollapseClick"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
import React, { useState, useEffect, useMemo, useRef } from 'react';
import { createPortal } from 'react-dom';
import PT from 'prop-types';
import ArrowSidebarLeftOutline from '@scaleflex/icons/arrow-sidebar-left-outline';
import ArrowSidebarRightOutline from '@scaleflex/icons/arrow-sidebar-right-outline';
import { intrinsicComponent, objectValues } from '../../utils/functions';
import { useMediaQuery, useTheme } from '../../theme/hooks';
import DrawerItemText from './drawer-item-text-component';
import DrawerItemIcon from './drawer-item-icon.component';
import DrawerContext from './drawer.context';
import Backdrop from '../backdrop';
import Styled from './drawer.styles';
import { Variant } from './types';
var Drawer = intrinsicComponent(function (_ref, ref) {
  var children = _ref.children,
    open = _ref.open,
    _ref$iconsSize = _ref.iconsSize,
    iconsSize = _ref$iconsSize === void 0 ? 20 : _ref$iconsSize,
    _ref$collapsed = _ref.collapsed,
    collapsed = _ref$collapsed === void 0 ? false : _ref$collapsed,
    top = _ref.top,
    hideBackdrop = _ref.hideBackdrop,
    disablePortal = _ref.disablePortal,
    _ref$collapseButtonLa = _ref.collapseButtonLabel,
    collapseButtonLabel = _ref$collapseButtonLa === void 0 ? 'Collapse menu' : _ref$collapseButtonLa,
    _ref$persistentDrawer = _ref.persistentDrawerStyles,
    persistentDrawerStyles = _ref$persistentDrawer === void 0 ? {} : _ref$persistentDrawer,
    _ref$temproryDrawerSt = _ref.temproryDrawerStyles,
    temproryDrawerStyles = _ref$temproryDrawerSt === void 0 ? {} : _ref$temproryDrawerSt,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? Variant.Auto : _ref$variant,
    onClose = _ref.onClose,
    onCollapse = _ref.onCollapse,
    onCollapseClick = _ref.onCollapseClick,
    rest = _objectWithoutProperties(_ref, _excluded);
  var theme = useTheme();
  var matchDownXl = useMediaQuery(theme.breakpoints.down('xl'));
  var _useState = useState(collapsed),
    _useState2 = _slicedToArray(_useState, 2),
    isCollapsed = _useState2[0],
    setIsCollapsed = _useState2[1];
  var temproryDrawerRef = useRef(null);
  var DrawerIconsSize = useMemo(function () {
    return iconsSize;
  }, [iconsSize]);
  var target = document.querySelector('body');
  useEffect(function () {
    setIsCollapsed(collapsed);
  }, [collapsed]);
  useEffect(function () {
    if (onCollapse) {
      onCollapse(isCollapsed);
    }
  }, [isCollapsed]);
  var handleCollapse = function handleCollapse() {
    var newCollpaseState = !isCollapsed;
    setIsCollapsed(newCollpaseState);
    if (onCollapseClick) {
      onCollapseClick(newCollpaseState);
    }
  };
  var handleClose = function handleClose() {
    if (typeof onClose === 'function') {
      onClose();
    }
  };
  var keyListener = function keyListener(ev) {
    var isTemporaryDrawer = false;
    if (temproryDrawerRef !== null && temproryDrawerRef !== void 0 && temproryDrawerRef.current) {
      var _temproryDrawerRef$cu;
      isTemporaryDrawer = (temproryDrawerRef === null || temproryDrawerRef === void 0 ? void 0 : (_temproryDrawerRef$cu = temproryDrawerRef.current) === null || _temproryDrawerRef$cu === void 0 ? void 0 : _temproryDrawerRef$cu.offsetWidth) > 0;
    }
    if (ev.key === 'Escape' && isTemporaryDrawer) {
      handleClose();
    }
  };
  useEffect(function () {
    document.addEventListener('keydown', keyListener);
    return function () {
      return document.removeEventListener('keydown', keyListener);
    };
  }, []);
  var renderDrawer = function renderDrawer(showCollapsedButton) {
    return /*#__PURE__*/React.createElement(Styled.Drawer, _extends({
      open: open,
      top: top
    }, rest, {
      isCollapsed: showCollapsedButton ? isCollapsed : false,
      ref: ref
    }), children, showCollapsedButton && /*#__PURE__*/React.createElement(Styled.CollapsedButton, {
      onClick: handleCollapse,
      isCollapsed: isCollapsed
    }, /*#__PURE__*/React.createElement(DrawerItemIcon, null, isCollapsed ? function (props) {
      return /*#__PURE__*/React.createElement(ArrowSidebarRightOutline, _extends({}, props, {
        size: iconsSize
      }));
    } : function (props) {
      return /*#__PURE__*/React.createElement(ArrowSidebarLeftOutline, _extends({}, props, {
        size: iconsSize
      }));
    }), /*#__PURE__*/React.createElement(DrawerItemText, null, collapseButtonLabel)));
  };
  var renderBackdrop = function renderBackdrop() {
    return !hideBackdrop && open ? /*#__PURE__*/React.createElement(Backdrop, {
      onClick: onClose
    }) : null;
  };
  var temporaryDrawer = function temporaryDrawer() {
    return disablePortal ? /*#__PURE__*/React.createElement(Styled.TemporaryDrawer, {
      ref: temproryDrawerRef,
      style: _objectSpread({}, temproryDrawerStyles),
      open: open
    }, renderBackdrop(), renderDrawer(false)) : /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(Styled.TemporaryDrawer, {
      ref: temproryDrawerRef,
      style: _objectSpread({}, temproryDrawerStyles),
      open: open
    }, renderBackdrop(), renderDrawer(false)), target);
  };
  var persistentDrawer = function persistentDrawer() {
    return /*#__PURE__*/React.createElement(Styled.PersistentDrawer, {
      style: _objectSpread({}, persistentDrawerStyles)
    }, renderDrawer(true));
  };
  var getDrawerVariant = function getDrawerVariant() {
    switch (variant) {
      case Variant.Auto:
        return matchDownXl ? temporaryDrawer() : persistentDrawer();
      case Variant.Temporary:
        return temporaryDrawer();
      case Variant.Persistent:
        return persistentDrawer();
      default:
        return matchDownXl ? temporaryDrawer() : persistentDrawer();
    }
  };
  return /*#__PURE__*/React.createElement(DrawerContext.Provider, {
    value: {
      isCollapsed: !matchDownXl ? isCollapsed : false,
      size: DrawerIconsSize
    }
  }, getDrawerVariant());
});
export var defaultProps = {
  open: false,
  hideBackdrop: false,
  iconsSize: 20,
  variant: Variant.Auto
};
Drawer.defaultProps = defaultProps;
export var propTypes = {
  onClose: PT.func.isRequired,
  onCollapse: PT.func,
  onCollapseClick: PT.func,
  children: PT.node.isRequired,
  top: PT.number,
  iconsSize: PT.number,
  open: PT.bool,
  hideBackdrop: PT.bool,
  collapsed: PT.bool,
  disablePortal: PT.bool,
  collapseButtonLabel: PT.string,
  persistentDrawerStyles: PT.object,
  temproryDrawerStyles: PT.object,
  variant: PT.oneOf(objectValues(Variant))
};
Drawer.propTypes = propTypes;
export default Drawer;