import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["status", "notificationBackground"];
import React from 'react';
import PT from 'prop-types';
import { Success, About, Error, Warning, InfoOutline, WarningOutline, ErrorOutline } from '@scaleflex/icons';
import { lightPalette } from '@scaleflex/ui/theme/roots/palette';
import { Color } from '@scaleflex/ui/utils/types/palette';
import { intrinsicComponent, objectValues } from '../../utils/functions';
import { Status } from './types';
import Styled from './popup-status.styles';
var getPopupStatusIcon = function getPopupStatusIcon(status, notificationBackground) {
  switch (status) {
    case Status.Warning:
      return notificationBackground ? /*#__PURE__*/React.createElement(Warning, {
        color: lightPalette[Color.Warning],
        size: 20
      }) : /*#__PURE__*/React.createElement(WarningOutline, {
        color: lightPalette[Color.Warning],
        size: 12
      });
    case Status.Error:
      return notificationBackground ? /*#__PURE__*/React.createElement(Error, {
        color: lightPalette[Color.Error],
        size: 20
      }) : /*#__PURE__*/React.createElement(ErrorOutline, {
        color: lightPalette[Color.Error],
        size: 12
      });
    case Status.Info:
      return notificationBackground ? /*#__PURE__*/React.createElement(About, {
        color: lightPalette[Color.Info],
        size: 20
      }) : /*#__PURE__*/React.createElement(InfoOutline, {
        color: lightPalette[Color.Info],
        size: 12
      });
    case Status.Success:
    default:
      return /*#__PURE__*/React.createElement(Success, {
        color: lightPalette[Color.Success],
        size: 20
      });
  }
};
var PopupStatus = intrinsicComponent(function (_ref, ref) {
  var status = _ref.status,
    _ref$notificationBack = _ref.notificationBackground,
    notificationBackground = _ref$notificationBack === void 0 ? true : _ref$notificationBack,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement(Styled.PopupStatus, _extends({
    status: status
  }, rest, {
    ref: ref
  }), getPopupStatusIcon(status, notificationBackground));
});
export var defaultProps = {
  status: Status.Success
};
PopupStatus.defaultProps = defaultProps;
export var propTypes = {
  status: PT.oneOf(objectValues(Status))
};
PopupStatus.propTypes = propTypes;
export default PopupStatus;