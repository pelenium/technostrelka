import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["fullWidth", "size", "value", "readOnly", "disabled", "error", "cols", "rows", "copyTextMessage", "copySuccessIcon"];
import React, { useState, useEffect } from 'react';
import PT from 'prop-types';
import CopyOutline from '@scaleflex/icons/copy-outline';
import { intrinsicComponent, objectValues } from '../../utils/functions';
import { InputSize } from '../../utils/types';
import { handleCopyIcon } from '../input/input.utils';
import InputStyled from '../input/input.styles';
import Styled from './textarea.styles';
import { Size } from '../menu-item/types';
var Textarea = intrinsicComponent(function (_ref, ref) {
  var fullWidth = _ref.fullWidth,
    size = _ref.size,
    value = _ref.value,
    readOnly = _ref.readOnly,
    disabled = _ref.disabled,
    error = _ref.error,
    cols = _ref.cols,
    rows = _ref.rows,
    _ref$copyTextMessage = _ref.copyTextMessage,
    copyTextMessage = _ref$copyTextMessage === void 0 ? '' : _ref$copyTextMessage,
    copySuccessIcon = _ref.copySuccessIcon,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isHovering = _useState2[0],
    setIsHovering = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    showCopyMessage = _useState4[0],
    setShowCopyMessage = _useState4[1];
  useEffect(function () {
    setTimeout(function () {
      return setShowCopyMessage(false);
    }, 2000);
  }, [showCopyMessage]);
  var handleEntering = function handleEntering() {
    setTimeout(function () {
      setIsHovering(true);
    }, 150);
  };
  var handleLeaving = function handleLeaving() {
    setTimeout(function () {
      setIsHovering(false);
    }, 200);
  };
  var renderCopyText = function renderCopyText() {
    return /*#__PURE__*/React.createElement(InputStyled.NotificationBox, {
      size: size,
      style: {
        bottom: size === Size.Md ? 83 : 68
      }
    }, /*#__PURE__*/React.createElement(InputStyled.NotificationIcon, null, copySuccessIcon), /*#__PURE__*/React.createElement(InputStyled.NotificationText, null, copyTextMessage));
  };
  return /*#__PURE__*/React.createElement(Styled.Textarea, {
    size: size,
    value: value,
    onMouseEnter: handleEntering,
    onMouseLeave: handleLeaving,
    readOnly: readOnly,
    disabled: disabled,
    fullWidth: Boolean(fullWidth),
    error: error,
    autoSize: Boolean(cols) || Boolean(rows)
  }, /*#__PURE__*/React.createElement(Styled.Base, _extends({}, rest, {
    value: value,
    ref: ref,
    readOnly: readOnly,
    disabled: disabled
  })), isHovering && readOnly ? /*#__PURE__*/React.createElement(Styled.CopyIcon, {
    onClick: function onClick() {
      return handleCopyIcon(value, setShowCopyMessage);
    }
  }, /*#__PURE__*/React.createElement(CopyOutline, {
    size: 16
  })) : undefined, showCopyMessage && renderCopyText());
});
Textarea.defaultProps = {
  size: InputSize.Md,
  error: false,
  fullWidth: false,
  readOnly: false,
  disabled: false
};
export var propTypes = {
  error: PT.bool,
  readOnly: PT.bool,
  disabled: PT.bool,
  fullWidth: PT.bool,
  value: PT.any,
  size: PT.oneOf(objectValues(InputSize)),
  copySuccessIcon: PT.oneOfType([PT.node, PT.func]),
  copyTextMessage: PT.string,
  cols: PT.number,
  rows: PT.number
};
Textarea.propTypes = propTypes;
export default Textarea;