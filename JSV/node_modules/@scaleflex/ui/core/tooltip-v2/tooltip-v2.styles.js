import { applyDisplayNames, generateClassNames } from '@scaleflex/ui/utils/functions';
import Tippy from '@tippyjs/react';
import styled, { css } from 'styled-components';
import { BorderRadiusSize as BRSize } from '../../utils/types/shape/border-radius-size';
import { Color as PColor } from '../../utils/types/palette';
import { fontTooltipMixin, sizeTooltipMixin } from '../tooltip/tooltip.mixin';
import { Size } from './types';
var baseClassName = 'TooltipV2';
var TooltipV2 = /*#__PURE__*/styled(Tippy).attrs({
  className: generateClassNames(baseClassName, 'root')
}).withConfig({
  componentId: "sc-4j2dcr-0"
})(function (_ref) {
  var $warning = _ref.$warning,
    _ref$$size = _ref.$size,
    $size = _ref$$size === void 0 ? Size.Sm : _ref$$size,
    theme = _ref.theme;
  return css(["display:inline-flex;align-items:center;min-width:54px;min-height:20px;border-radius:", ";background:", ";color:", ";", ";.tippy-arrow{color:", ";}.tippy-content{padding:0;", "}"], theme.shape.borderRadius[BRSize.Md], $warning ? theme.palette[PColor.BackgroundOrange] : theme.palette[PColor.IconsPlaceholder], $warning ? theme.palette[PColor.TextWarning] : theme.palette[PColor.LinkActive], sizeTooltipMixin[$size], $warning ? theme.palette[PColor.BackgroundOrange] : theme.palette[PColor.IconsPlaceholder], fontTooltipMixin[$size]);
});
var TooltipText = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'content')
}).withConfig({
  componentId: "sc-4j2dcr-1"
})(function (_ref2) {
  var warning = _ref2.warning,
    theme = _ref2.theme;
  return css(["display:flex;align-items:center;color:", ";"], warning ? theme.palette[PColor.TextWarning] : theme.palette[PColor.LinkActive]);
});
var Styled = applyDisplayNames({
  TooltipV2: TooltipV2,
  TooltipText: TooltipText
});
export default Styled;