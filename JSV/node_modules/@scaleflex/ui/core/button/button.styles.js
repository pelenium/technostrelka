import styled, { css } from 'styled-components';
import { generateClassNames, applyDisplayNames } from '../../utils/functions';
import { BorderRadiusSize as BRSize } from '../../utils/types/shape';
import { colorButtonMixin, sizeButtonMixin, sizeButtonLabelMixin, sizeSidebarMixin, sizeSidebarDividerMixin, paddingIconLabelMixin, sizeSecondaryButtonMixin } from './button.mixin';
import { Color as PaletteColor } from '../../utils/types/palette';
import { ButtonSize, ButtonColor } from '../../utils/types';
import { ButtonType, SideBar } from './types';
var baseClassName = 'Button';
var Label = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'Label')
}).withConfig({
  componentId: "sc-lxwit0-0"
})(["display:flex;"]);
var Badge = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'Badge')
}).withConfig({
  componentId: "sc-lxwit0-1"
})(["display:flex;margin-left:5px;"]);
var Wrapper = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'Body')
}).withConfig({
  componentId: "sc-lxwit0-2"
})(function () {
  return css(["display:flex;align-items:center;"]);
});
var Button = /*#__PURE__*/styled.button.attrs({
  className: generateClassNames(baseClassName, 'root')
}).withConfig({
  componentId: "sc-lxwit0-3"
})(function (_ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? ButtonColor.Secondary : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? ButtonSize.Md : _ref$size,
    buttonType = _ref.buttonType,
    active = _ref.active,
    theme = _ref.theme;
  return css(["display:inline-flex;flex-shrink:0;flex-direction:row;align-items:center;justify-content:center;border-radius:", ";transition:all 100ms ease-out;border:0;cursor:pointer;outline:none;", " ", " ", " ", "{", " ", "}", "{", "}", ""], theme.shape.borderRadius[BRSize.Md], buttonType !== ButtonType.Sidebar && colorButtonMixin[color], buttonType === ButtonType.Sidebar ? sizeSidebarMixin[size] : sizeButtonMixin[size], color === ButtonColor.Secondary && sizeSecondaryButtonMixin[size], Label, sizeButtonLabelMixin[size], (color === ButtonColor.LinkBasicPrimary || color === ButtonColor.LinkBasicSecondary) && "font-weight: 400", Badge, sizeButtonLabelMixin[size], buttonType === ButtonType.Sidebar && css(["background-color:", ";color:", ";border:1px solid ", ";", " ", " &:disabled{color:", ";background:", ";border:none;cursor:default;}"], theme.palette[PaletteColor.ButtonPrimaryText], theme.palette[PaletteColor.LinkStateless], theme.palette[PaletteColor.BordersButton], !active && css(["&:hover{color:", ";background-color:", ";border:none;}&:active{color:", ";background-color:", ";border:none;}"], theme.palette[PaletteColor.ButtonPrimaryText], theme.palette[PaletteColor.AccentPrimaryHover], theme.palette[PaletteColor.ButtonPrimaryText], theme.palette[PaletteColor.AccentPrimaryActive]), active && css(["background-color:", ";color:", ";border:1px solid ", ";"], theme.palette[PaletteColor.Accent_1_2_Opacity], theme.palette[PaletteColor.AccentPrimaryActive], theme.palette[PaletteColor.AccentPrimaryActive]), theme.palette[PaletteColor.BordersDisabled], theme.palette[PaletteColor.AccentPrimaryDisabled]));
});
var StartIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'StartIcon')
}).withConfig({
  componentId: "sc-lxwit0-4"
})(function (_ref2) {
  var $loading = _ref2.$loading,
    _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? ButtonSize.Md : _ref2$size;
  return css(["display:flex;svg{animation:", ";}", ""], $loading ? 'spinner 1.2s linear infinite' : '1.2s', paddingIconLabelMixin[size]);
});
var SideArrows = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'SideBar')
}).withConfig({
  componentId: "sc-lxwit0-5"
})(function (_ref3) {
  var sideBarType = _ref3.sideBarType;
  return css(["display:flex;", ":12px;"], "margin-".concat(sideBarType === SideBar.Left ? 'right' : 'left'));
});
var Divider = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'Divider')
}).withConfig({
  componentId: "sc-lxwit0-6"
})(function (_ref4) {
  var sideBarType = _ref4.sideBarType,
    _ref4$size = _ref4.size,
    size = _ref4$size === void 0 ? ButtonSize.Md : _ref4$size;
  return css(["border-left-style:solid;border-width:1px;", " ", ":12px;"], sizeSidebarDividerMixin[size], "margin-".concat(sideBarType === SideBar.Left ? 'right' : 'left'));
});
var EndIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'EndIcon')
}).withConfig({
  componentId: "sc-lxwit0-7"
})(["display:flex;margin-left:6px;"]);
var Styled = applyDisplayNames({
  Button: Button,
  Wrapper: Wrapper,
  Label: Label,
  SideArrows: SideArrows,
  Divider: Divider,
  StartIcon: StartIcon,
  EndIcon: EndIcon,
  Badge: Badge
});
export default Styled;