import styled, { css } from 'styled-components';
import { generateClassNames, applyDisplayNames } from '../../utils/functions';
import { Color as PColor } from '../../utils/types/palette';
import { BorderRadiusSize as BRSize } from '../../utils/types/shape';
import { fontLabelMixin, statusLabelMixin } from './status-label.mixin';
import { Size, Type, Variant } from './types';
var baseClassName = 'StatusLabel';
var StatusLabel = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'Label')
}).withConfig({
  componentId: "sc-2nnq4u-0"
})(["display:flex;align-items:center;border-radius:inherit;"]);
var StatusIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'Icon')
}).withConfig({
  componentId: "sc-2nnq4u-1"
})(function (_ref) {
  var _ref$type = _ref.type,
    type = _ref$type === void 0 ? Type.Received : _ref$type,
    iconSize = _ref.iconSize;
  return css(["width:", "px;height:", "px;border-radius:50%;display:inline-flex;margin-right:4px;margin-bottom:2px;box-sizing:border-box;", ""], iconSize, iconSize, statusLabelMixin[type]);
});
var StatusLabelWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'root')
}).withConfig({
  componentId: "sc-2nnq4u-2"
})(function (_ref2) {
  var _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? Size.Md : _ref2$size,
    _ref2$type = _ref2.type,
    type = _ref2$type === void 0 ? Type.Default : _ref2$type,
    _ref2$variant = _ref2.variant,
    variant = _ref2$variant === void 0 ? Variant.Filled : _ref2$variant,
    theme = _ref2.theme;
  return css(["position:relative;display:inline-flex;justify-content:center;align-items:center;padding:2px 8px;background-color:", ";color:", ";border-radius:", ";box-sizing:border-box;", " ", ""], type === Type.Inactive ? theme.palette[PColor.IconsSecondary] : theme.palette[PColor.Success], theme.palette[PColor.BackgroundSecondary], theme.shape.borderRadius[BRSize.Md], variant === Variant.Text && css(["background:transparent;color:", ";", "{", "}"], theme.palette[PColor.TextPrimary], StatusLabel, fontLabelMixin[size]), variant === Variant.Filled && type !== Type.Default && type !== Type.Inactive && css(["background-color:", ";color:", ";padding:2px 4px;box-shadow:0px 1px 3px rgba(77,78,78,0.15);"], theme.palette[PColor.BackgroundStateless], theme.palette[PColor.TextSecondary]));
});
var Styled = applyDisplayNames({
  StatusLabel: StatusLabel,
  StatusIcon: StatusIcon,
  StatusLabelWrapper: StatusLabelWrapper
});
export default Styled;